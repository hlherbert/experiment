package com.hl.gene.old;

import java.io.*;

/**
 * Input and output function of TSP
 * @author hl
 *
 */
public class TspIO {
	//--------------------------- INPUT -----------------------------------------	
	
	enum OutputMode
	{
		Console,  //output to console (system.out)
		String    //output to a StringBuffer
	}
	
	private OutputMode outMode=OutputMode.Console;
	private StringBuffer outStrBuf; //the string buffer to output
	
		public void SetToConsoleMode()
		{
			outMode=OutputMode.Console;
		}
		
		public void SetToStringMode(StringBuffer sb)
		{
			outMode=OutputMode.String;
			outStrBuf=sb;
		}
		
		private void print(String s)
		{
			if (outMode==OutputMode.Console)
			{
				System.out.print(s);
			}
			else if (outMode==OutputMode.String)
			{
				outStrBuf.append(s);
			}
		}
		
		private void println(String s)
		{
			print(s+"\n");
		}
		
		private void println()
		{
			print("\n");
		}
		
		private void printErr(String s)
		{
			if (outMode==OutputMode.Console)
			{
				System.err.print(s);
			}
			else if (outMode==OutputMode.String)
			{
				outStrBuf.append(s);
			}
		}
		
		/**
		 * Input TSP data
		 * Input: 
		 *  tspFilepath: the file path of standard TSP file
		 * Output: 
		 *  cost: cost matrix of each city pair, cost[i-1][j-1] is the distance from 
		 *        city i to city j, because cost array start with index of 0, not 1.
		 *        City index starts with 1.
		 *  n: number of cities. 
		 */
		public void InputTSP(String tspFilepath,TspData data)
		{
			println("INPUT:");
			println("file: "+tspFilepath);
			InputTSPFile(tspFilepath,data);		
			//Show Input Data
			println("total city n="+data.n);
			println("cost matrix:");
			for (int i=0;i<data.n;i++)
			{
				for (int j=0;j<data.n;j++)
					print(data.cost[i][j]+"\t");
				println();
			}
		}
		
		/**
		 * Read TSP File, get coordinates of each city, 
		 * and calculate the cost(distance) of each city pair.
		 * Sample data file with 7 cities:
		 *	NAME: concorde7
		 *	TYPE: TSP
		 *	COMMENT: Generated by CCutil_writetsplib
		 *	COMMENT: Write called for by Concorde GUI
		 *	DIMENSION: 7
		 *	EDGE_WEIGHT_TYPE: EUC_2D
		 *	NODE_COORD_SECTION
		 *	1 87.951292 2.658162
		 *	2 33.466597 66.682943
		 *	3 91.778314 53.807184
		 *	4 20.526749 47.633290
		 *	5 9.006012 81.185339
		 *	6 20.032350 2.761925
		 *	7 77.181310 31.922361
		 * @param filepath
		 */
		private void InputTSPFile(String filepath, TspData data)
		{
			try {
				FileReader fr = new FileReader(filepath);
				BufferedReader br = new BufferedReader(fr);
				String s = null; //string of each line
				int n=0; //number of cities
				double x[]=null; //coords of cities
				double y[]=null;
				double[][] cost= null; //cost between cities
				
				// read line by line
				do {
					s = br.readLine();
					if (s==null )
						break;
					if (s.isEmpty())
						break;
					// When meet DIMENSION line, get number of cities n
					if (s.startsWith("DIMENSION:"))
					{
						int len = "DIMENSION:".length();
						String strN = s.substring(len).trim();
						n = Integer.parseInt(strN);
						x = new double[n];
						y = new double[n];
					}
					// When meet NOOD_COORD_SECTION
					if (s.startsWith("NODE_COORD_SECTION"))
					{
						//read coordinates of cities
						do {
							s= br.readLine();
							if (s==null)
								break;
							if (s.isEmpty())
								break;
							String[] ss=s.split("[ \t]");
							int i = Integer.parseInt(ss[0]); //city index
							double xx = Double.parseDouble(ss[1]); //x coord
							double yy = Double.parseDouble(ss[2]); //y coord
							x[i-1]=xx; // x[i-1],y[i-1] stores coords of city i
							y[i-1]=yy;
						} while (true);
						//calculate cost of each city pair
						cost= new double[n][n];
						for (int i=0;i<n;i++)
						{
							for (int j=0;j<n;j++)
							{
								cost[i][j]=Math.sqrt( (x[i]-x[j])*(x[i]-x[j])
										        +(y[i]-y[j])*(y[i]-y[j]) );
							}
						}
					}
				}while (true);
				//close file
				br.close();
				fr.close();
				//assign output results to TSPData structure
				data.n=n;
				data.cost=cost;
				data.x=x;
				data.y=y;
			} catch (FileNotFoundException e)
			{
				printErr("TSP File "+filepath+" not found.\n");
				return;
			} catch (IOException e) {
				printErr("IO error when reading file.\n");
				return;
			}
		}
		
		
		//--------------------------- OUTPUT -----------------------------------------
		/**
		 * Print the best traveling cycle(solution)Tmin and min cost of this cycle Smin
		 * @param solution
		 */
		public void OutputTSP( TspSolution solution)
		{
			println("OUTPUT:");
			if (solution==null)
				return;
			println("PathCost="+solution.pathcost);
			println("Path:");
			if (solution.path==null)
				println("NULL");
			else
				for (int i=0;i<solution.path.length;i++)
				{
					print(solution.path[i]+",");
				}
			println();
			println("time:"+solution.millisecond+" ms");//time
			println("transition:"+solution.transition);
		}
}
